// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql" // Usamos PostgreSQL
  url      = env("DATABASE_URL") // La URL de conexión desde el archivo .env
}

generator client {
  provider = "prisma-client-js" // Generador para el cliente de Prisma
}

model Users {
  user_id          String         @id @default(uuid())
  name             String
  lastname         String
  birthday         String?
  role_id          Int
  register_date    DateTime       @default(now())
  email            String         @unique
  profile_image    String?
  password         String
  seller           Sellers?
  deleteAt_user_id DeleteAt_user?
}

model Sellers {
  seller_id            String               @id @default(uuid())
  user_id              String               @unique
  seller_level_id      Int
  description          String?
  register_date        DateTime             @default(now())
  change_seller_id     Change_seller_level?
  sales_type_id        Int
  url_website          String?
  collection_method_id Int
  punctuation          Float? // averiguar como hacer el promedio dentro de otra tabla
  wallet_id            Wallets? // hacer desde el endpoint la creacion del wallet al seller!! no olvidar ese detalle!!!! al registrar el seller y luego proceder a crear el wallet
  user                 Users                @relation(fields: [user_id], references: [user_id])
  ratings              Seller_ratings[] // Relación uno a muchos con Seller_ratings
  courses              Courses[] // Relación uno a muchos con Courses
}

model Seller_ratings {
  id        Int      @id @default(autoincrement())
  seller_id String
  user_id   String // validar que un mismo usuario no pueda hacer mas de una calificacion
  rating    Int
  comment   String
  date      DateTime
  seller    Sellers  @relation(fields: [seller_id], references: [seller_id]) // Relación con Sellers
}

model Seller_levels {
  level_id Int    @id @default(autoincrement())
  name     String
}

model Change_seller_level {
  id        Int      @id @default(autoincrement())
  seller_id String   @unique
  level_id  Int
  date      DateTime
  seller    Sellers  @relation(fields: [seller_id], references: [seller_id])
}

model Sales_type {
  id   Int    @id @default(autoincrement())
  name String
}

model Collection_method {
  id   Int    @id @default(autoincrement())
  name String
}

model Roles {
  id   Int    @id @default(autoincrement())
  name String
}

model Wallets {
  id           String         @id @default(uuid())
  seller_id    String         @unique
  balance      Decimal
  seller       Sellers        @relation(fields: [seller_id], references: [seller_id])
  transactions Transactions[] // Relación uno a muchos con Transactions
}

model DeleteAt_user {
  id      Int      @id @default(autoincrement())
  user_id String   @unique
  date    DateTime
  user    Users    @relation(fields: [user_id], references: [user_id])
}

model Transactions {
  id               Int      @id @default(autoincrement())
  wallet_id        String
  type_transaction Int
  date             DateTime
  amount           Decimal
  wallet           Wallets  @relation(fields: [wallet_id], references: [id]) // Relación con Sellers
}

model Type_transactions {
  id   Int    @id @default(autoincrement())
  name String
}

model Courses {
  id                Int               @id @default(autoincrement())
  title             String
  seller_id         String
  type_course_id    Int
  premium           Boolean           @default(false)
  description       String?
  course_level_id   Int
  platform_id       Int
  language_id       Int
  sector_id         Int
  content_pillar_id Int
  functionality_id  Int
  tool_id           Int
  tags              String[]
  price             Decimal
  seller            Sellers           @relation(fields: [seller_id], references: [seller_id]) // Relación con Sellers
  stars             Courses_ratings[]
  punctuation       Decimal
}

model Courses_ratings {
  id        Int      @id @default(autoincrement())
  course_id Int
  user_id   String // validar que un mismo usuario no pueda hacer mas de una calificacion
  rating    Int
  comment   String
  date      DateTime
  course    Courses  @relation(fields: [course_id], references: [id]) // Relación con Sellers
}

model Types_of_courses {
  id   Int    @id @default(autoincrement())
  name String
}

model Courses_level {
  id   Int    @id @default(autoincrement())
  name String
}

model Platforms {
  id   Int    @id @default(autoincrement())
  name String
}

model Languages {
  id   Int    @id @default(autoincrement())
  name String
}

model Sectors {
  id   Int    @id @default(autoincrement())
  name String
}

model Content_pillars {
  id   Int    @id @default(autoincrement())
  name String
}

model Functionality {
  id   Int    @id @default(autoincrement())
  name String
}

model Tools {
  id   Int    @id @default(autoincrement())
  name String
}
