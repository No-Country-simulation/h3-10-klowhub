// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql" // Usamos PostgreSQL
  url      = env("DATABASE_URL") // La URL de conexión desde el archivo .env
  //directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js" // Generador para el cliente de Prisma
}

model Users {
  user_id          String          @id @default(uuid())
  name             String
  lastname         String
  birthday         String?
  role_id          Int?
  email            String          @unique
  profile_image    String?
  password         String
  isUserActive     Boolean         @default(true)
  notification     Boolean         @default(false)
  seller           Sellers?
  deleteAt_user_id DeleteAt_user[] // al borrado logico actualizar isActive en false dentro de Sellers
}

model Sellers {
  seller_id            String                @id @default(uuid())
  user_id              String                @unique
  seller_level_id      Int                   @default(1)
  description          String?
  isUserActive         Boolean               @default(true) // verificar que el usuario este activo
  change_seller_id     Change_seller_level[]
  sales_type_id        Int
  url_website          String?
  collection_method_id Int
  punctuation          Float?                @default(0) // averiguar como hacer el promedio dentro de otra tabla
  wallet_id            Wallets? // hacer desde el endpoint la creacion del wallet al seller!! no olvidar ese detalle!!!! al registrar el seller y luego proceder a crear el wallet
  user                 Users                 @relation(fields: [user_id], references: [user_id])
  ratings              Seller_ratings[] // Relación uno a muchos con Seller_ratings
  courses              Courses[] // Relación uno a muchos con Courses
}

model Registers_date {
  register_date_id Int      @id @default(autoincrement())
  id               String   @unique
  date             DateTime
  isSeller         Boolean  @default(false)
}

// cada vez que se modifique la tabla de rating tiene que actualizar la puntuacion en la tabla
model Seller_ratings {
  id        Int      @id @default(autoincrement())
  seller_id String
  user_id   String // validar que un mismo usuario no pueda hacer mas de una calificacion
  rating    Int
  comment   String
  date      DateTime
  seller    Sellers  @relation(fields: [seller_id], references: [seller_id]) // Relación con Sellers
}

// es la tabla diccionario con el nivel por ejemplo starter
model Seller_levels {
  level_id Int    @id @default(autoincrement())
  name     String
}

model Change_seller_level {
  id        Int      @id @default(autoincrement())
  seller_id String
  level_id  Int
  date      DateTime
  seller    Sellers  @relation(fields: [seller_id], references: [seller_id])
}

// es la tabla de categoria de vendodor por ejemplo desarrolador de apps
model Sales_type {
  id   Int    @id @default(autoincrement())
  name String
}

// retiro del dinero
model Collection_method {
  id   Int    @id @default(autoincrement())
  name String
}

model Roles {
  id   Int    @id @default(autoincrement())
  name String
}

model Wallets {
  id           String         @id @default(uuid())
  seller_id    String         @unique
  balance      Decimal
  seller       Sellers        @relation(fields: [seller_id], references: [seller_id])
  transactions Transactions[] // Relación uno a muchos con Transactions
  // si se concreto en true restar del balance el monto transaccion
}

model DeleteAt_user {
  id      Int      @id @default(autoincrement())
  user_id String
  date    DateTime @default(now())
  user    Users    @relation(fields: [user_id], references: [user_id])
}

model Transactions {
  id               Int                @id @default(autoincrement())
  wallet_id        String
  type_transaction Int
  date             DateTime
  amount           Decimal
  wallet           Wallets            @relation(fields: [wallet_id], references: [id]) // Relación con Sellers
  purchases        Purchased_courses?
  // validar si la operacion es factible, luego validar que la operacion se concreto y luego un trigger que cambie el balance del Wallets asociado
}

model Type_transactions {
  id   Int    @id @default(autoincrement())
  name String
}

// aclaracion para visualizar los cursos en en front dentro de Sellers devolver solos los Sellers activos GET
model Courses {
  id                Int               @id @default(autoincrement())
  title             String
  seller_id         String
  type_course_id    Int
  premium           Boolean           @default(false)
  description       String?
  course_level_id   Int
  platform_id       Int
  language_id       Int
  sector_id         Int
  content_pillar_id Int
  functionality_id  Int
  tool_id           Int
  tags              String[]
  price             Decimal
  seller            Sellers           @relation(fields: [seller_id], references: [seller_id]) // Relación con Sellers
  stars             Courses_ratings[]
  punctuation       Decimal           @default(0)
  updateAt          DateTime          @default(now())

  type_course       Types_of_courses    @relation(fields: [type_course_id], references: [id])
  course_level      Courses_level       @relation(fields: [course_level_id], references: [id])
  platform          Platforms           @relation(fields: [platform_id], references: [id])
  language          Languages           @relation(fields: [language_id], references: [id])
  sector            Sectors             @relation(fields: [sector_id], references: [id])
  contentPillar     Content_pillars     @relation(fields: [content_pillar_id], references: [id])
  functionality     Functionality       @relation(fields: [functionality_id], references: [id])
  tool              Tools               @relation(fields: [tool_id], references: [id])
}

// cada vez que se modifique la tabla de rating tiene que actualizar la puntuacion en la tabla
model Courses_ratings {
  id        Int      @id @default(autoincrement())
  course_id Int
  user_id   String // validar que un mismo usuario no pueda hacer mas de una calificacion
  rating    Int
  comment   String
  date      DateTime
  course    Courses  @relation(fields: [course_id], references: [id]) // Relación con Sellers
}

model Types_of_courses {
  id      Int      @id @default(autoincrement())
  name    String
  courses Courses[]
}

model Courses_level {
  id      Int      @id @default(autoincrement())
  name    String
  courses Courses[]
}

model Platforms {
  id      Int      @id @default(autoincrement())
  name    String
  courses Courses[]
}

model Languages {
  id      Int      @id @default(autoincrement())
  name    String
  courses Courses[]
}

model Sectors {
  id      Int      @id @default(autoincrement())
  name    String
  courses Courses[]
}

model Content_pillars {
  id      Int      @id @default(autoincrement())
  name    String
  courses Courses[]
}

model Functionality {
  id      Int      @id @default(autoincrement())
  name    String
  courses Courses[]
}

model Tools {
  id      Int      @id @default(autoincrement())
  name    String
  courses Courses[]
}

// revisar como un usuario que no es vendedor compra un curso
model Purchased_courses {
  id             Int          @id @default(autoincrement())
  transaction_id Int          @unique
  user_id        String
  course_id      String
  transaction    Transactions @relation(fields: [transaction_id], references: [id])
}
